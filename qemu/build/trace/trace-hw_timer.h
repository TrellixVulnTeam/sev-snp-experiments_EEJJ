/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_TIMER_GENERATED_TRACERS_H
#define TRACE_HW_TIMER_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_SLAVIO_TIMER_GET_OUT_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_READL_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_EVENT;
extern TraceEvent _TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_ENABLE_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_DISABLED_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_RESTART_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_SET_SCALER_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_HIT_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_READL_EVENT;
extern TraceEvent _TRACE_GRLIB_GPTIMER_WRITEL_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_ENABLE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_SET_CTRL2_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_SET_VALUE_EVENT;
extern TraceEvent _TRACE_ASPEED_TIMER_READ_EVENT;
extern TraceEvent _TRACE_SYSTICK_RELOAD_EVENT;
extern TraceEvent _TRACE_SYSTICK_TIMER_TICK_EVENT;
extern TraceEvent _TRACE_SYSTICK_READ_EVENT;
extern TraceEvent _TRACE_SYSTICK_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_READ_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_TIMER_RESET_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_READ_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_WRITE_EVENT;
extern TraceEvent _TRACE_CMSDK_APB_DUALTIMER_RESET_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_TIMER_IRQ_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_READ_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_NRF51_TIMER_SET_COUNT_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_IRQ_ACK_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_SYSTMR_RUN_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_IFR_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_READ_IMSK_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_WRITE_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_WRITE_IMSK_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_INTERRUPT_COUNT_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_NEXT_ALARM_EVENT;
extern TraceEvent _TRACE_AVR_TIMER16_CLKSRC_UPDATE_EVENT;
extern TraceEvent _TRACE_SSE_COUNTER_CONTROL_READ_EVENT;
extern TraceEvent _TRACE_SSE_COUNTER_CONTROL_WRITE_EVENT;
extern TraceEvent _TRACE_SSE_COUNTER_STATUS_READ_EVENT;
extern TraceEvent _TRACE_SSE_COUNTER_STATUS_WRITE_EVENT;
extern TraceEvent _TRACE_SSE_COUNTER_RESET_EVENT;
extern TraceEvent _TRACE_SSE_TIMER_READ_EVENT;
extern TraceEvent _TRACE_SSE_TIMER_WRITE_EVENT;
extern TraceEvent _TRACE_SSE_TIMER_RESET_EVENT;
extern TraceEvent _TRACE_SIFIVE_PWM_SET_ALARM_EVENT;
extern TraceEvent _TRACE_SIFIVE_PWM_INTERRUPT_EVENT;
extern TraceEvent _TRACE_SIFIVE_PWM_READ_EVENT;
extern TraceEvent _TRACE_SIFIVE_PWM_WRITE_EVENT;
extern uint16_t _TRACE_SLAVIO_TIMER_GET_OUT_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_READL_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_DSTATE;
extern uint16_t _TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_ENABLE_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_DISABLED_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_RESTART_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_SET_SCALER_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_HIT_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_READL_DSTATE;
extern uint16_t _TRACE_GRLIB_GPTIMER_WRITEL_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_ENABLE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_SET_CTRL2_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_SET_VALUE_DSTATE;
extern uint16_t _TRACE_ASPEED_TIMER_READ_DSTATE;
extern uint16_t _TRACE_SYSTICK_RELOAD_DSTATE;
extern uint16_t _TRACE_SYSTICK_TIMER_TICK_DSTATE;
extern uint16_t _TRACE_SYSTICK_READ_DSTATE;
extern uint16_t _TRACE_SYSTICK_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_READ_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_TIMER_RESET_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_READ_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_WRITE_DSTATE;
extern uint16_t _TRACE_CMSDK_APB_DUALTIMER_RESET_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_TIMER_IRQ_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_READ_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_NRF51_TIMER_SET_COUNT_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_IRQ_ACK_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_SYSTMR_RUN_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_IFR_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_READ_IMSK_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_WRITE_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_WRITE_IMSK_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_INTERRUPT_COUNT_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_NEXT_ALARM_DSTATE;
extern uint16_t _TRACE_AVR_TIMER16_CLKSRC_UPDATE_DSTATE;
extern uint16_t _TRACE_SSE_COUNTER_CONTROL_READ_DSTATE;
extern uint16_t _TRACE_SSE_COUNTER_CONTROL_WRITE_DSTATE;
extern uint16_t _TRACE_SSE_COUNTER_STATUS_READ_DSTATE;
extern uint16_t _TRACE_SSE_COUNTER_STATUS_WRITE_DSTATE;
extern uint16_t _TRACE_SSE_COUNTER_RESET_DSTATE;
extern uint16_t _TRACE_SSE_TIMER_READ_DSTATE;
extern uint16_t _TRACE_SSE_TIMER_WRITE_DSTATE;
extern uint16_t _TRACE_SSE_TIMER_RESET_DSTATE;
extern uint16_t _TRACE_SIFIVE_PWM_SET_ALARM_DSTATE;
extern uint16_t _TRACE_SIFIVE_PWM_INTERRUPT_DSTATE;
extern uint16_t _TRACE_SIFIVE_PWM_READ_DSTATE;
extern uint16_t _TRACE_SIFIVE_PWM_WRITE_DSTATE;
#define TRACE_SLAVIO_TIMER_GET_OUT_ENABLED 1
#define TRACE_SLAVIO_TIMER_IRQ_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_ENABLED 1
#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_ENABLED 1
#define TRACE_GRLIB_GPTIMER_ENABLE_ENABLED 1
#define TRACE_GRLIB_GPTIMER_DISABLED_ENABLED 1
#define TRACE_GRLIB_GPTIMER_RESTART_ENABLED 1
#define TRACE_GRLIB_GPTIMER_SET_SCALER_ENABLED 1
#define TRACE_GRLIB_GPTIMER_HIT_ENABLED 1
#define TRACE_GRLIB_GPTIMER_READL_ENABLED 1
#define TRACE_GRLIB_GPTIMER_WRITEL_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_ENABLED 1
#define TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_CTRL2_ENABLED 1
#define TRACE_ASPEED_TIMER_SET_VALUE_ENABLED 1
#define TRACE_ASPEED_TIMER_READ_ENABLED 1
#define TRACE_SYSTICK_RELOAD_ENABLED 1
#define TRACE_SYSTICK_TIMER_TICK_ENABLED 1
#define TRACE_SYSTICK_READ_ENABLED 1
#define TRACE_SYSTICK_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_READ_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_TIMER_RESET_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_READ_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_WRITE_ENABLED 1
#define TRACE_CMSDK_APB_DUALTIMER_RESET_ENABLED 1
#define TRACE_NPCM7XX_TIMER_READ_ENABLED 1
#define TRACE_NPCM7XX_TIMER_WRITE_ENABLED 1
#define TRACE_NPCM7XX_TIMER_IRQ_ENABLED 1
#define TRACE_NRF51_TIMER_READ_ENABLED 1
#define TRACE_NRF51_TIMER_WRITE_ENABLED 1
#define TRACE_NRF51_TIMER_SET_COUNT_ENABLED 1
#define TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_ENABLED 1
#define TRACE_BCM2835_SYSTMR_IRQ_ACK_ENABLED 1
#define TRACE_BCM2835_SYSTMR_READ_ENABLED 1
#define TRACE_BCM2835_SYSTMR_WRITE_ENABLED 1
#define TRACE_BCM2835_SYSTMR_RUN_ENABLED 1
#define TRACE_AVR_TIMER16_READ_ENABLED 1
#define TRACE_AVR_TIMER16_READ_IFR_ENABLED 1
#define TRACE_AVR_TIMER16_READ_IMSK_ENABLED 1
#define TRACE_AVR_TIMER16_WRITE_ENABLED 1
#define TRACE_AVR_TIMER16_WRITE_IMSK_ENABLED 1
#define TRACE_AVR_TIMER16_INTERRUPT_COUNT_ENABLED 1
#define TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_ENABLED 1
#define TRACE_AVR_TIMER16_NEXT_ALARM_ENABLED 1
#define TRACE_AVR_TIMER16_CLKSRC_UPDATE_ENABLED 1
#define TRACE_SSE_COUNTER_CONTROL_READ_ENABLED 1
#define TRACE_SSE_COUNTER_CONTROL_WRITE_ENABLED 1
#define TRACE_SSE_COUNTER_STATUS_READ_ENABLED 1
#define TRACE_SSE_COUNTER_STATUS_WRITE_ENABLED 1
#define TRACE_SSE_COUNTER_RESET_ENABLED 1
#define TRACE_SSE_TIMER_READ_ENABLED 1
#define TRACE_SSE_TIMER_WRITE_ENABLED 1
#define TRACE_SSE_TIMER_RESET_ENABLED 1
#define TRACE_SIFIVE_PWM_SET_ALARM_ENABLED 1
#define TRACE_SIFIVE_PWM_INTERRUPT_ENABLED 1
#define TRACE_SIFIVE_PWM_READ_ENABLED 1
#define TRACE_SIFIVE_PWM_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_SLAVIO_TIMER_GET_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_GET_OUT) || \
    false)

static inline void _nocheck__trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_GET_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_get_out " "limit 0x%"PRIx64" count 0x%x0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , limit, counthigh, count);
#line 235 "trace/trace-hw_timer.h"
        } else {
#line 4 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_get_out " "limit 0x%"PRIx64" count 0x%x0x%08x" "\n", limit, counthigh, count);
#line 239 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_get_out(uint64_t limit, uint32_t counthigh, uint32_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_get_out(limit, counthigh, count);
    }
}

#define TRACE_SLAVIO_TIMER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_IRQ) || \
    false)

static inline void _nocheck__trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_irq " "callback: count 0x%x0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , counthigh, count);
#line 266 "trace/trace-hw_timer.h"
        } else {
#line 5 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_irq " "callback: count 0x%x0x%08x" "\n", counthigh, count);
#line 270 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_irq(uint32_t counthigh, uint32_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_irq(counthigh, count);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_READL_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_READL_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_READL_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_readl_invalid " "invalid read address 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 297 "trace/trace-hw_timer.h"
        } else {
#line 6 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_readl_invalid " "invalid read address 0x%"PRIx64 "\n", addr);
#line 301 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_readl_invalid(uint64_t addr)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_readl_invalid(addr);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_readl " "read 0x%"PRIx64" = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, ret);
#line 328 "trace/trace-hw_timer.h"
        } else {
#line 7 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_readl " "read 0x%"PRIx64" = 0x%08x" "\n", addr, ret);
#line 332 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_readl(addr, ret);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel " "write 0x%"PRIx64" = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 359 "trace/trace-hw_timer.h"
        } else {
#line 8 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel " "write 0x%"PRIx64" = 0x%08x" "\n", addr, val);
#line 363 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel(addr, val);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_LIMIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_limit " "processor %d user timer set to 0x%016"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_index, count);
#line 390 "trace/trace-hw_timer.h"
        } else {
#line 9 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_limit " "processor %d user timer set to 0x%016"PRIx64 "\n", timer_index, count);
#line 394 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_limit(unsigned int timer_index, uint64_t count)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_limit(timer_index, count);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_counter_invalid(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_COUNTER_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_counter_invalid " "not user timer" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 421 "trace/trace-hw_timer.h"
        } else {
#line 10 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_counter_invalid " "not user timer" "\n");
#line 425 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_counter_invalid(void)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_counter_invalid();
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_START) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_status_start " "processor %d user timer started" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_index);
#line 452 "trace/trace-hw_timer.h"
        } else {
#line 11 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_status_start " "processor %d user timer started" "\n", timer_index);
#line 456 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_status_start(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_status_start(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_STATUS_STOP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_status_stop " "processor %d user timer stopped" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_index);
#line 483 "trace/trace-hw_timer.h"
        } else {
#line 12 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_status_stop " "processor %d user timer stopped" "\n", timer_index);
#line 487 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_status_stop(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_status_stop(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_USER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_user " "processor %d changed from counter to user timer" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_index);
#line 514 "trace/trace-hw_timer.h"
        } else {
#line 13 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_mode_user " "processor %d changed from counter to user timer" "\n", timer_index);
#line 518 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_mode_user(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_user(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_COUNTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_counter " "processor %d changed from user timer to counter" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_index);
#line 545 "trace/trace-hw_timer.h"
        } else {
#line 14 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_mode_counter " "processor %d changed from user timer to counter" "\n", timer_index);
#line 549 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_mode_counter(unsigned int timer_index)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_counter(timer_index);
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_mode_invalid(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_MODE_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_mode_invalid " "not system timer" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 576 "trace/trace-hw_timer.h"
        } else {
#line 15 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_mode_invalid " "not system timer" "\n");
#line 580 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_mode_invalid(void)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_mode_invalid();
    }
}

#define TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID) || \
    false)

static inline void _nocheck__trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
    if (trace_event_get_state(TRACE_SLAVIO_TIMER_MEM_WRITEL_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_timer_mem_writel_invalid " "invalid write address 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 607 "trace/trace-hw_timer.h"
        } else {
#line 16 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("slavio_timer_mem_writel_invalid " "invalid write address 0x%"PRIx64 "\n", addr);
#line 611 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_slavio_timer_mem_writel_invalid(uint64_t addr)
{
    if (true) {
        _nocheck__trace_slavio_timer_mem_writel_invalid(addr);
    }
}

#define TRACE_GRLIB_GPTIMER_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_ENABLE) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_enable(int id, uint32_t count)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_enable " "timer:%d set count 0x%x and run" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, count);
#line 638 "trace/trace-hw_timer.h"
        } else {
#line 19 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_enable " "timer:%d set count 0x%x and run" "\n", id, count);
#line 642 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_enable(int id, uint32_t count)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_enable(id, count);
    }
}

#define TRACE_GRLIB_GPTIMER_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_DISABLED) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_disabled(int id, uint32_t config)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_disabled " "timer:%d Timer disable config 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, config);
#line 669 "trace/trace-hw_timer.h"
        } else {
#line 20 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_disabled " "timer:%d Timer disable config 0x%x" "\n", id, config);
#line 673 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_disabled(int id, uint32_t config)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_disabled(id, config);
    }
}

#define TRACE_GRLIB_GPTIMER_RESTART_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_RESTART) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_restart(int id, uint32_t reload)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_RESTART) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_restart " "timer:%d reload val: 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, reload);
#line 700 "trace/trace-hw_timer.h"
        } else {
#line 21 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_restart " "timer:%d reload val: 0x%x" "\n", id, reload);
#line 704 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_restart(int id, uint32_t reload)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_restart(id, reload);
    }
}

#define TRACE_GRLIB_GPTIMER_SET_SCALER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_SET_SCALER) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_SET_SCALER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_set_scaler " "scaler:0x%x freq:%uHz" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , scaler, freq);
#line 731 "trace/trace-hw_timer.h"
        } else {
#line 22 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_set_scaler " "scaler:0x%x freq:%uHz" "\n", scaler, freq);
#line 735 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_set_scaler(uint32_t scaler, uint32_t freq)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_set_scaler(scaler, freq);
    }
}

#define TRACE_GRLIB_GPTIMER_HIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_HIT) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_hit(int id)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_HIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_hit " "timer:%d HIT" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 762 "trace/trace-hw_timer.h"
        } else {
#line 23 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_hit " "timer:%d HIT" "\n", id);
#line 766 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_hit(int id)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_hit(id);
    }
}

#define TRACE_GRLIB_GPTIMER_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_READL) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_readl " "timer:%d addr 0x%"PRIx64" 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, addr, val);
#line 793 "trace/trace-hw_timer.h"
        } else {
#line 24 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_readl " "timer:%d addr 0x%"PRIx64" 0x%x" "\n", id, addr, val);
#line 797 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_readl(int id, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_readl(id, addr, val);
    }
}

#define TRACE_GRLIB_GPTIMER_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_GPTIMER_WRITEL) || \
    false)

static inline void _nocheck__trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GRLIB_GPTIMER_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_gptimer_writel " "timer:%d addr 0x%"PRIx64" 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, addr, val);
#line 824 "trace/trace-hw_timer.h"
        } else {
#line 25 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("grlib_gptimer_writel " "timer:%d addr 0x%"PRIx64" 0x%x" "\n", id, addr, val);
#line 828 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_grlib_gptimer_writel(int id, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_grlib_gptimer_writel(id, addr, val);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_ENABLE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_enable(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_enable " "Timer %" PRIu8 ": %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i, enable);
#line 855 "trace/trace-hw_timer.h"
        } else {
#line 28 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_ctrl_enable " "Timer %" PRIu8 ": %d" "\n", i, enable);
#line 859 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_ctrl_enable(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_enable(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_external_clock(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_EXTERNAL_CLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_external_clock " "Timer %" PRIu8 ": %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i, enable);
#line 886 "trace/trace-hw_timer.h"
        } else {
#line 29 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_ctrl_external_clock " "Timer %" PRIu8 ": %d" "\n", i, enable);
#line 890 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_ctrl_external_clock(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_external_clock(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_overflow_interrupt(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_OVERFLOW_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_overflow_interrupt " "Timer %" PRIu8 ": %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i, enable);
#line 917 "trace/trace-hw_timer.h"
        } else {
#line 30 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_ctrl_overflow_interrupt " "Timer %" PRIu8 ": %d" "\n", i, enable);
#line 921 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_ctrl_overflow_interrupt(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_overflow_interrupt(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_ctrl_pulse_enable(uint8_t i, bool enable)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_CTRL_PULSE_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_ctrl_pulse_enable " "Timer %" PRIu8 ": %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , i, enable);
#line 948 "trace/trace-hw_timer.h"
        } else {
#line 31 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_ctrl_pulse_enable " "Timer %" PRIu8 ": %d" "\n", i, enable);
#line 952 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_ctrl_pulse_enable(uint8_t i, bool enable)
{
    if (true) {
        _nocheck__trace_aspeed_timer_ctrl_pulse_enable(i, enable);
    }
}

#define TRACE_ASPEED_TIMER_SET_CTRL2_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_SET_CTRL2) || \
    false)

static inline void _nocheck__trace_aspeed_timer_set_ctrl2(uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_SET_CTRL2) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_set_ctrl2 " "Value: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 979 "trace/trace-hw_timer.h"
        } else {
#line 32 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_set_ctrl2 " "Value: 0x%" PRIx32 "\n", value);
#line 983 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_set_ctrl2(uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_set_ctrl2(value);
    }
}

#define TRACE_ASPEED_TIMER_SET_VALUE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_SET_VALUE) || \
    false)

static inline void _nocheck__trace_aspeed_timer_set_value(int timer, int reg, uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_SET_VALUE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_set_value " "Timer %d register %d: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer, reg, value);
#line 1010 "trace/trace-hw_timer.h"
        } else {
#line 33 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_set_value " "Timer %d register %d: 0x%" PRIx32 "\n", timer, reg, value);
#line 1014 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_set_value(int timer, int reg, uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_set_value(timer, reg, value);
    }
}

#define TRACE_ASPEED_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_TIMER_READ) || \
    false)

static inline void _nocheck__trace_aspeed_timer_read(uint64_t offset, unsigned size, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_timer_read " "From 0x%" PRIx64 ": of size %u: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, value);
#line 1041 "trace/trace-hw_timer.h"
        } else {
#line 34 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("aspeed_timer_read " "From 0x%" PRIx64 ": of size %u: 0x%" PRIx64 "\n", offset, size, value);
#line 1045 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_aspeed_timer_read(uint64_t offset, unsigned size, uint64_t value)
{
    if (true) {
        _nocheck__trace_aspeed_timer_read(offset, size, value);
    }
}

#define TRACE_SYSTICK_RELOAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_RELOAD) || \
    false)

static inline void _nocheck__trace_systick_reload(void)
{
    if (trace_event_get_state(TRACE_SYSTICK_RELOAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:systick_reload " "systick reload" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1072 "trace/trace-hw_timer.h"
        } else {
#line 37 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("systick_reload " "systick reload" "\n");
#line 1076 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_systick_reload(void)
{
    if (true) {
        _nocheck__trace_systick_reload();
    }
}

#define TRACE_SYSTICK_TIMER_TICK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_TIMER_TICK) || \
    false)

static inline void _nocheck__trace_systick_timer_tick(void)
{
    if (trace_event_get_state(TRACE_SYSTICK_TIMER_TICK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:systick_timer_tick " "systick reload" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1103 "trace/trace-hw_timer.h"
        } else {
#line 38 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("systick_timer_tick " "systick reload" "\n");
#line 1107 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_systick_timer_tick(void)
{
    if (true) {
        _nocheck__trace_systick_timer_tick();
    }
}

#define TRACE_SYSTICK_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_READ) || \
    false)

static inline void _nocheck__trace_systick_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_SYSTICK_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:systick_read " "systick read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value, size);
#line 1134 "trace/trace-hw_timer.h"
        } else {
#line 39 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("systick_read " "systick read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", addr, value, size);
#line 1138 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_systick_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_systick_read(addr, value, size);
    }
}

#define TRACE_SYSTICK_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SYSTICK_WRITE) || \
    false)

static inline void _nocheck__trace_systick_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_SYSTICK_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:systick_write " "systick write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value, size);
#line 1165 "trace/trace-hw_timer.h"
        } else {
#line 40 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("systick_write " "systick write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", addr, value, size);
#line 1169 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_systick_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_systick_write(addr, value, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_READ) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_read " "CMSDK APB timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1196 "trace/trace-hw_timer.h"
        } else {
#line 43 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_timer_read " "CMSDK APB timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 1200 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_read(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_write " "CMSDK APB timer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1227 "trace/trace-hw_timer.h"
        } else {
#line 44 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_timer_write " "CMSDK APB timer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 1231 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_write(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_TIMER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_TIMER_RESET) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_timer_reset(void)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_TIMER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_timer_reset " "CMSDK APB timer: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1258 "trace/trace-hw_timer.h"
        } else {
#line 45 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_timer_reset " "CMSDK APB timer: reset" "\n");
#line 1262 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_timer_reset(void)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_timer_reset();
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_READ) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_read " "CMSDK APB dualtimer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1289 "trace/trace-hw_timer.h"
        } else {
#line 48 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_dualtimer_read " "CMSDK APB dualtimer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 1293 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_dualtimer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_read(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_WRITE) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_write " "CMSDK APB dualtimer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 1320 "trace/trace-hw_timer.h"
        } else {
#line 49 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_dualtimer_write " "CMSDK APB dualtimer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 1324 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_dualtimer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_write(offset, data, size);
    }
}

#define TRACE_CMSDK_APB_DUALTIMER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CMSDK_APB_DUALTIMER_RESET) || \
    false)

static inline void _nocheck__trace_cmsdk_apb_dualtimer_reset(void)
{
    if (trace_event_get_state(TRACE_CMSDK_APB_DUALTIMER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:cmsdk_apb_dualtimer_reset " "CMSDK APB dualtimer: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1351 "trace/trace-hw_timer.h"
        } else {
#line 50 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("cmsdk_apb_dualtimer_reset " "CMSDK APB dualtimer: reset" "\n");
#line 1355 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_cmsdk_apb_dualtimer_reset(void)
{
    if (true) {
        _nocheck__trace_cmsdk_apb_dualtimer_reset();
    }
}

#define TRACE_NPCM7XX_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_read(const char * id, uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_timer_read " " %s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 1382 "trace/trace-hw_timer.h"
        } else {
#line 53 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("npcm7xx_timer_read " " %s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n", id, offset, value);
#line 1386 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_npcm7xx_timer_read(const char * id, uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_read(id, offset, value);
    }
}

#define TRACE_NPCM7XX_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_write(const char * id, uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_timer_write " "%s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 1413 "trace/trace-hw_timer.h"
        } else {
#line 54 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("npcm7xx_timer_write " "%s offset: 0x%04" PRIx64 " value 0x%08" PRIx64 "\n", id, offset, value);
#line 1417 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_npcm7xx_timer_write(const char * id, uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_write(id, offset, value);
    }
}

#define TRACE_NPCM7XX_TIMER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_TIMER_IRQ) || \
    false)

static inline void _nocheck__trace_npcm7xx_timer_irq(const char * id, int timer, int state)
{
    if (trace_event_get_state(TRACE_NPCM7XX_TIMER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_timer_irq " "%s timer %d state %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, timer, state);
#line 1444 "trace/trace-hw_timer.h"
        } else {
#line 55 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("npcm7xx_timer_irq " "%s timer %d state %d" "\n", id, timer, state);
#line 1448 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_npcm7xx_timer_irq(const char * id, int timer, int state)
{
    if (true) {
        _nocheck__trace_npcm7xx_timer_irq(id, timer, state);
    }
}

#define TRACE_NRF51_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_READ) || \
    false)

static inline void _nocheck__trace_nrf51_timer_read(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:nrf51_timer_read " "timer %u read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_id, addr, value, size);
#line 1475 "trace/trace-hw_timer.h"
        } else {
#line 58 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("nrf51_timer_read " "timer %u read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", timer_id, addr, value, size);
#line 1479 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_nrf51_timer_read(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nrf51_timer_read(timer_id, addr, value, size);
    }
}

#define TRACE_NRF51_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_nrf51_timer_write(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:nrf51_timer_write " "timer %u write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_id, addr, value, size);
#line 1506 "trace/trace-hw_timer.h"
        } else {
#line 59 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("nrf51_timer_write " "timer %u write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", timer_id, addr, value, size);
#line 1510 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_nrf51_timer_write(uint8_t timer_id, uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nrf51_timer_write(timer_id, addr, value, size);
    }
}

#define TRACE_NRF51_TIMER_SET_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NRF51_TIMER_SET_COUNT) || \
    false)

static inline void _nocheck__trace_nrf51_timer_set_count(uint8_t timer_id, uint8_t counter_id, uint32_t value)
{
    if (trace_event_get_state(TRACE_NRF51_TIMER_SET_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:nrf51_timer_set_count " "timer %u counter %u count 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , timer_id, counter_id, value);
#line 1537 "trace/trace-hw_timer.h"
        } else {
#line 60 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("nrf51_timer_set_count " "timer %u counter %u count 0x%" PRIx32 "\n", timer_id, counter_id, value);
#line 1541 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_nrf51_timer_set_count(uint8_t timer_id, uint8_t counter_id, uint32_t value)
{
    if (true) {
        _nocheck__trace_nrf51_timer_set_count(timer_id, counter_id, value);
    }
}

#define TRACE_BCM2835_SYSTMR_TIMER_EXPIRED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_TIMER_EXPIRED) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_timer_expired(unsigned id)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_TIMER_EXPIRED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_systmr_timer_expired " "timer #%u expired" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 1568 "trace/trace-hw_timer.h"
        } else {
#line 63 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("bcm2835_systmr_timer_expired " "timer #%u expired" "\n", id);
#line 1572 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_bcm2835_systmr_timer_expired(unsigned id)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_timer_expired(id);
    }
}

#define TRACE_BCM2835_SYSTMR_IRQ_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_IRQ_ACK) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_irq_ack(unsigned id)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_IRQ_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_systmr_irq_ack " "timer #%u acked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 1599 "trace/trace-hw_timer.h"
        } else {
#line 64 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("bcm2835_systmr_irq_ack " "timer #%u acked" "\n", id);
#line 1603 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_bcm2835_systmr_irq_ack(unsigned id)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_irq_ack(id);
    }
}

#define TRACE_BCM2835_SYSTMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_read(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_systmr_read " "timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1630 "trace/trace-hw_timer.h"
        } else {
#line 65 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("bcm2835_systmr_read " "timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 1634 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_bcm2835_systmr_read(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_read(offset, data);
    }
}

#define TRACE_BCM2835_SYSTMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_write(uint64_t offset, uint32_t data)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_systmr_write " "timer write: offset 0x%" PRIx64 " data 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 1661 "trace/trace-hw_timer.h"
        } else {
#line 66 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("bcm2835_systmr_write " "timer write: offset 0x%" PRIx64 " data 0x%" PRIx32 "\n", offset, data);
#line 1665 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_bcm2835_systmr_write(uint64_t offset, uint32_t data)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_write(offset, data);
    }
}

#define TRACE_BCM2835_SYSTMR_RUN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_SYSTMR_RUN) || \
    false)

static inline void _nocheck__trace_bcm2835_systmr_run(unsigned id, uint64_t delay_us)
{
    if (trace_event_get_state(TRACE_BCM2835_SYSTMR_RUN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 67 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_systmr_run " "timer #%u expiring in %"PRIu64" us" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, delay_us);
#line 1692 "trace/trace-hw_timer.h"
        } else {
#line 67 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("bcm2835_systmr_run " "timer #%u expiring in %"PRIu64" us" "\n", id, delay_us);
#line 1696 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_bcm2835_systmr_run(unsigned id, uint64_t delay_us)
{
    if (true) {
        _nocheck__trace_bcm2835_systmr_run(id, delay_us);
    }
}

#define TRACE_AVR_TIMER16_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ) || \
    false)

static inline void _nocheck__trace_avr_timer16_read(uint8_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 70 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_read " "timer16 read addr:%u value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 1723 "trace/trace-hw_timer.h"
        } else {
#line 70 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_read " "timer16 read addr:%u value:%u" "\n", addr, value);
#line 1727 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_read(uint8_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read(addr, value);
    }
}

#define TRACE_AVR_TIMER16_READ_IFR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ_IFR) || \
    false)

static inline void _nocheck__trace_avr_timer16_read_ifr(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ_IFR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 71 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_read_ifr " "timer16 read addr:ifr value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 1754 "trace/trace-hw_timer.h"
        } else {
#line 71 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_read_ifr " "timer16 read addr:ifr value:%u" "\n", value);
#line 1758 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_read_ifr(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read_ifr(value);
    }
}

#define TRACE_AVR_TIMER16_READ_IMSK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_READ_IMSK) || \
    false)

static inline void _nocheck__trace_avr_timer16_read_imsk(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_READ_IMSK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 72 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_read_imsk " "timer16 read addr:imsk value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 1785 "trace/trace-hw_timer.h"
        } else {
#line 72 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_read_imsk " "timer16 read addr:imsk value:%u" "\n", value);
#line 1789 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_read_imsk(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_read_imsk(value);
    }
}

#define TRACE_AVR_TIMER16_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_WRITE) || \
    false)

static inline void _nocheck__trace_avr_timer16_write(uint8_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 73 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_write " "timer16 write addr:%u value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 1816 "trace/trace-hw_timer.h"
        } else {
#line 73 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_write " "timer16 write addr:%u value:%u" "\n", addr, value);
#line 1820 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_write(uint8_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_write(addr, value);
    }
}

#define TRACE_AVR_TIMER16_WRITE_IMSK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_WRITE_IMSK) || \
    false)

static inline void _nocheck__trace_avr_timer16_write_imsk(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_WRITE_IMSK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_write_imsk " "timer16 write addr:imsk value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 1847 "trace/trace-hw_timer.h"
        } else {
#line 74 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_write_imsk " "timer16 write addr:imsk value:%u" "\n", value);
#line 1851 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_write_imsk(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_timer16_write_imsk(value);
    }
}

#define TRACE_AVR_TIMER16_INTERRUPT_COUNT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_INTERRUPT_COUNT) || \
    false)

static inline void _nocheck__trace_avr_timer16_interrupt_count(uint8_t cnt)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_INTERRUPT_COUNT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_interrupt_count " "count: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cnt);
#line 1878 "trace/trace-hw_timer.h"
        } else {
#line 75 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_interrupt_count " "count: %u" "\n", cnt);
#line 1882 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_interrupt_count(uint8_t cnt)
{
    if (true) {
        _nocheck__trace_avr_timer16_interrupt_count(cnt);
    }
}

#define TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW) || \
    false)

static inline void _nocheck__trace_avr_timer16_interrupt_overflow(const char * reason)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_INTERRUPT_OVERFLOW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_interrupt_overflow " "overflow: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reason);
#line 1909 "trace/trace-hw_timer.h"
        } else {
#line 76 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_interrupt_overflow " "overflow: %s" "\n", reason);
#line 1913 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_interrupt_overflow(const char * reason)
{
    if (true) {
        _nocheck__trace_avr_timer16_interrupt_overflow(reason);
    }
}

#define TRACE_AVR_TIMER16_NEXT_ALARM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_NEXT_ALARM) || \
    false)

static inline void _nocheck__trace_avr_timer16_next_alarm(uint64_t delay_ns)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_NEXT_ALARM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_next_alarm " "next alarm: %" PRIu64 " ns from now" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , delay_ns);
#line 1940 "trace/trace-hw_timer.h"
        } else {
#line 77 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_next_alarm " "next alarm: %" PRIu64 " ns from now" "\n", delay_ns);
#line 1944 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_next_alarm(uint64_t delay_ns)
{
    if (true) {
        _nocheck__trace_avr_timer16_next_alarm(delay_ns);
    }
}

#define TRACE_AVR_TIMER16_CLKSRC_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_TIMER16_CLKSRC_UPDATE) || \
    false)

static inline void _nocheck__trace_avr_timer16_clksrc_update(uint64_t freq_hz, uint64_t period_ns, uint64_t delay_s)
{
    if (trace_event_get_state(TRACE_AVR_TIMER16_CLKSRC_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:avr_timer16_clksrc_update " "timer frequency: %" PRIu64 " Hz, period: %" PRIu64 " ns (%" PRId64 " us)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , freq_hz, period_ns, delay_s);
#line 1971 "trace/trace-hw_timer.h"
        } else {
#line 78 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("avr_timer16_clksrc_update " "timer frequency: %" PRIu64 " Hz, period: %" PRIu64 " ns (%" PRId64 " us)" "\n", freq_hz, period_ns, delay_s);
#line 1975 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_avr_timer16_clksrc_update(uint64_t freq_hz, uint64_t period_ns, uint64_t delay_s)
{
    if (true) {
        _nocheck__trace_avr_timer16_clksrc_update(freq_hz, period_ns, delay_s);
    }
}

#define TRACE_SSE_COUNTER_CONTROL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_COUNTER_CONTROL_READ) || \
    false)

static inline void _nocheck__trace_sse_counter_control_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_COUNTER_CONTROL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 81 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_counter_control_read " "SSE system counter control frame read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2002 "trace/trace-hw_timer.h"
        } else {
#line 81 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_counter_control_read " "SSE system counter control frame read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2006 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_counter_control_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_counter_control_read(offset, data, size);
    }
}

#define TRACE_SSE_COUNTER_CONTROL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_COUNTER_CONTROL_WRITE) || \
    false)

static inline void _nocheck__trace_sse_counter_control_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_COUNTER_CONTROL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 82 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_counter_control_write " "SSE system counter control framen write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2033 "trace/trace-hw_timer.h"
        } else {
#line 82 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_counter_control_write " "SSE system counter control framen write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2037 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_counter_control_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_counter_control_write(offset, data, size);
    }
}

#define TRACE_SSE_COUNTER_STATUS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_COUNTER_STATUS_READ) || \
    false)

static inline void _nocheck__trace_sse_counter_status_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_COUNTER_STATUS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 83 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_counter_status_read " "SSE system counter status frame read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2064 "trace/trace-hw_timer.h"
        } else {
#line 83 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_counter_status_read " "SSE system counter status frame read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2068 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_counter_status_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_counter_status_read(offset, data, size);
    }
}

#define TRACE_SSE_COUNTER_STATUS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_COUNTER_STATUS_WRITE) || \
    false)

static inline void _nocheck__trace_sse_counter_status_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_COUNTER_STATUS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 84 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_counter_status_write " "SSE system counter status frame write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2095 "trace/trace-hw_timer.h"
        } else {
#line 84 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_counter_status_write " "SSE system counter status frame write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2099 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_counter_status_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_counter_status_write(offset, data, size);
    }
}

#define TRACE_SSE_COUNTER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_COUNTER_RESET) || \
    false)

static inline void _nocheck__trace_sse_counter_reset(void)
{
    if (trace_event_get_state(TRACE_SSE_COUNTER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 85 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_counter_reset " "SSE system counter: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2126 "trace/trace-hw_timer.h"
        } else {
#line 85 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_counter_reset " "SSE system counter: reset" "\n");
#line 2130 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_counter_reset(void)
{
    if (true) {
        _nocheck__trace_sse_counter_reset();
    }
}

#define TRACE_SSE_TIMER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_TIMER_READ) || \
    false)

static inline void _nocheck__trace_sse_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_TIMER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 88 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_timer_read " "SSE system timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2157 "trace/trace-hw_timer.h"
        } else {
#line 88 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_timer_read " "SSE system timer read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2161 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_timer_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_timer_read(offset, data, size);
    }
}

#define TRACE_SSE_TIMER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_TIMER_WRITE) || \
    false)

static inline void _nocheck__trace_sse_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_SSE_TIMER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 89 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_timer_write " "SSE system timer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2188 "trace/trace-hw_timer.h"
        } else {
#line 89 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_timer_write " "SSE system timer write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2192 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_timer_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_sse_timer_write(offset, data, size);
    }
}

#define TRACE_SSE_TIMER_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SSE_TIMER_RESET) || \
    false)

static inline void _nocheck__trace_sse_timer_reset(void)
{
    if (trace_event_get_state(TRACE_SSE_TIMER_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 90 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sse_timer_reset " "SSE system timer: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2219 "trace/trace-hw_timer.h"
        } else {
#line 90 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sse_timer_reset " "SSE system timer: reset" "\n");
#line 2223 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sse_timer_reset(void)
{
    if (true) {
        _nocheck__trace_sse_timer_reset();
    }
}

#define TRACE_SIFIVE_PWM_SET_ALARM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIFIVE_PWM_SET_ALARM) || \
    false)

static inline void _nocheck__trace_sifive_pwm_set_alarm(uint64_t alarm, uint64_t now)
{
    if (trace_event_get_state(TRACE_SIFIVE_PWM_SET_ALARM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 93 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sifive_pwm_set_alarm " "Setting alarm to: 0x%" PRIx64 ", now: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , alarm, now);
#line 2250 "trace/trace-hw_timer.h"
        } else {
#line 93 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sifive_pwm_set_alarm " "Setting alarm to: 0x%" PRIx64 ", now: 0x%" PRIx64 "\n", alarm, now);
#line 2254 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sifive_pwm_set_alarm(uint64_t alarm, uint64_t now)
{
    if (true) {
        _nocheck__trace_sifive_pwm_set_alarm(alarm, now);
    }
}

#define TRACE_SIFIVE_PWM_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIFIVE_PWM_INTERRUPT) || \
    false)

static inline void _nocheck__trace_sifive_pwm_interrupt(int num)
{
    if (trace_event_get_state(TRACE_SIFIVE_PWM_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 94 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sifive_pwm_interrupt " "Interrupt %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , num);
#line 2281 "trace/trace-hw_timer.h"
        } else {
#line 94 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sifive_pwm_interrupt " "Interrupt %d" "\n", num);
#line 2285 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sifive_pwm_interrupt(int num)
{
    if (true) {
        _nocheck__trace_sifive_pwm_interrupt(num);
    }
}

#define TRACE_SIFIVE_PWM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIFIVE_PWM_READ) || \
    false)

static inline void _nocheck__trace_sifive_pwm_read(uint64_t offset)
{
    if (trace_event_get_state(TRACE_SIFIVE_PWM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sifive_pwm_read " "Read at address: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 2312 "trace/trace-hw_timer.h"
        } else {
#line 95 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sifive_pwm_read " "Read at address: 0x%" PRIx64 "\n", offset);
#line 2316 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sifive_pwm_read(uint64_t offset)
{
    if (true) {
        _nocheck__trace_sifive_pwm_read(offset);
    }
}

#define TRACE_SIFIVE_PWM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SIFIVE_PWM_WRITE) || \
    false)

static inline void _nocheck__trace_sifive_pwm_write(uint64_t data, uint64_t offset)
{
    if (trace_event_get_state(TRACE_SIFIVE_PWM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 96 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("%d@%zu.%06zu:sifive_pwm_write " "Write 0x%" PRIx64 " at address: 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , data, offset);
#line 2343 "trace/trace-hw_timer.h"
        } else {
#line 96 "/home/anna/AMDSEV/qemu/hw/timer/trace-events"
            qemu_log("sifive_pwm_write " "Write 0x%" PRIx64 " at address: 0x%" PRIx64 "\n", data, offset);
#line 2347 "trace/trace-hw_timer.h"
        }
    }
}

static inline void trace_sifive_pwm_write(uint64_t data, uint64_t offset)
{
    if (true) {
        _nocheck__trace_sifive_pwm_write(data, offset);
    }
}
#endif /* TRACE_HW_TIMER_GENERATED_TRACERS_H */
